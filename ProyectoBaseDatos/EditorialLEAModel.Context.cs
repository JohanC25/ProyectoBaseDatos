//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ProyectoBaseDatos
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class EditorialLEAContext : DbContext
    {
        public EditorialLEAContext()
            : base("name=EditorialLEAContext")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Cliente> Clientes { get; set; }
        public virtual DbSet<Cobrador> Cobradors { get; set; }
        public virtual DbSet<ComprobantePago> ComprobantePagoes { get; set; }
        public virtual DbSet<Contrato> Contratoes { get; set; }
        public virtual DbSet<Estudiante> Estudiantes { get; set; }
        public virtual DbSet<InstitucionEducativa> InstitucionEducativas { get; set; }
        public virtual DbSet<Libro> Libroes { get; set; }
        public virtual DbSet<Proveedor> Proveedors { get; set; }
        public virtual DbSet<ReferenciaPago> ReferenciaPagoes { get; set; }
        public virtual DbSet<Trabajador> Trabajadors { get; set; }
        public virtual DbSet<ClienteEstudiante> ClienteEstudiantes { get; set; }
        public virtual DbSet<DetalleContrato> DetalleContratoes { get; set; }
        public virtual DbSet<ProveedorLibro> ProveedorLibroes { get; set; }
        public virtual DbSet<Secretario> Secretarios { get; set; }
        public virtual DbSet<InformeCliente> InformeClientes { get; set; }
        public virtual DbSet<InformeContrato> InformeContratos { get; set; }
        public virtual DbSet<InformePago> InformePagos { get; set; }
    
        public virtual int sp_InsertarCliente(string nombres, string apellidos, string cedula, string telefono, string celular, string ciudad, string direccion, string nombreEmpresa, string telefonoEmpresa, string direccionEmpresa, string conyugue, string empresaConyugue, string tipoVivienda, string direccionCobros)
        {
            var nombresParameter = nombres != null ?
                new ObjectParameter("nombres", nombres) :
                new ObjectParameter("nombres", typeof(string));
    
            var apellidosParameter = apellidos != null ?
                new ObjectParameter("apellidos", apellidos) :
                new ObjectParameter("apellidos", typeof(string));
    
            var cedulaParameter = cedula != null ?
                new ObjectParameter("cedula", cedula) :
                new ObjectParameter("cedula", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("telefono", telefono) :
                new ObjectParameter("telefono", typeof(string));
    
            var celularParameter = celular != null ?
                new ObjectParameter("celular", celular) :
                new ObjectParameter("celular", typeof(string));
    
            var ciudadParameter = ciudad != null ?
                new ObjectParameter("ciudad", ciudad) :
                new ObjectParameter("ciudad", typeof(string));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("direccion", direccion) :
                new ObjectParameter("direccion", typeof(string));
    
            var nombreEmpresaParameter = nombreEmpresa != null ?
                new ObjectParameter("nombreEmpresa", nombreEmpresa) :
                new ObjectParameter("nombreEmpresa", typeof(string));
    
            var telefonoEmpresaParameter = telefonoEmpresa != null ?
                new ObjectParameter("telefonoEmpresa", telefonoEmpresa) :
                new ObjectParameter("telefonoEmpresa", typeof(string));
    
            var direccionEmpresaParameter = direccionEmpresa != null ?
                new ObjectParameter("direccionEmpresa", direccionEmpresa) :
                new ObjectParameter("direccionEmpresa", typeof(string));
    
            var conyugueParameter = conyugue != null ?
                new ObjectParameter("conyugue", conyugue) :
                new ObjectParameter("conyugue", typeof(string));
    
            var empresaConyugueParameter = empresaConyugue != null ?
                new ObjectParameter("empresaConyugue", empresaConyugue) :
                new ObjectParameter("empresaConyugue", typeof(string));
    
            var tipoViviendaParameter = tipoVivienda != null ?
                new ObjectParameter("tipoVivienda", tipoVivienda) :
                new ObjectParameter("tipoVivienda", typeof(string));
    
            var direccionCobrosParameter = direccionCobros != null ?
                new ObjectParameter("direccionCobros", direccionCobros) :
                new ObjectParameter("direccionCobros", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertarCliente", nombresParameter, apellidosParameter, cedulaParameter, telefonoParameter, celularParameter, ciudadParameter, direccionParameter, nombreEmpresaParameter, telefonoEmpresaParameter, direccionEmpresaParameter, conyugueParameter, empresaConyugueParameter, tipoViviendaParameter, direccionCobrosParameter);
        }
    
        public virtual int sp_InsertarClienteEstudiante(Nullable<int> idCliente, Nullable<int> idEstudiante, string parentesco)
        {
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("idCliente", idCliente) :
                new ObjectParameter("idCliente", typeof(int));
    
            var idEstudianteParameter = idEstudiante.HasValue ?
                new ObjectParameter("idEstudiante", idEstudiante) :
                new ObjectParameter("idEstudiante", typeof(int));
    
            var parentescoParameter = parentesco != null ?
                new ObjectParameter("parentesco", parentesco) :
                new ObjectParameter("parentesco", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertarClienteEstudiante", idClienteParameter, idEstudianteParameter, parentescoParameter);
        }
    
        public virtual int sp_InsertarClienteReferencia(Nullable<int> idCliente, Nullable<int> idReferenciaPago)
        {
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("idCliente", idCliente) :
                new ObjectParameter("idCliente", typeof(int));
    
            var idReferenciaPagoParameter = idReferenciaPago.HasValue ?
                new ObjectParameter("idReferenciaPago", idReferenciaPago) :
                new ObjectParameter("idReferenciaPago", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertarClienteReferencia", idClienteParameter, idReferenciaPagoParameter);
        }
    
        public virtual int sp_InsertarClienteYEstudiante(string nombres, string apellidos, string cedula, string telefono, string celular, string ciudad, string direccion, string nombreEmpresa, string telefonoEmpresa, string direccionEmpresa, string conyugue, string empresaConyugue, string tipoVivienda, string direccionCobros, Nullable<short> idInstitucionEducativa, string nombreEstudiante, string apellidoEstudiante, string cursoEstudiante, string parentescoEstudiante)
        {
            var nombresParameter = nombres != null ?
                new ObjectParameter("nombres", nombres) :
                new ObjectParameter("nombres", typeof(string));
    
            var apellidosParameter = apellidos != null ?
                new ObjectParameter("apellidos", apellidos) :
                new ObjectParameter("apellidos", typeof(string));
    
            var cedulaParameter = cedula != null ?
                new ObjectParameter("cedula", cedula) :
                new ObjectParameter("cedula", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("telefono", telefono) :
                new ObjectParameter("telefono", typeof(string));
    
            var celularParameter = celular != null ?
                new ObjectParameter("celular", celular) :
                new ObjectParameter("celular", typeof(string));
    
            var ciudadParameter = ciudad != null ?
                new ObjectParameter("ciudad", ciudad) :
                new ObjectParameter("ciudad", typeof(string));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("direccion", direccion) :
                new ObjectParameter("direccion", typeof(string));
    
            var nombreEmpresaParameter = nombreEmpresa != null ?
                new ObjectParameter("nombreEmpresa", nombreEmpresa) :
                new ObjectParameter("nombreEmpresa", typeof(string));
    
            var telefonoEmpresaParameter = telefonoEmpresa != null ?
                new ObjectParameter("telefonoEmpresa", telefonoEmpresa) :
                new ObjectParameter("telefonoEmpresa", typeof(string));
    
            var direccionEmpresaParameter = direccionEmpresa != null ?
                new ObjectParameter("direccionEmpresa", direccionEmpresa) :
                new ObjectParameter("direccionEmpresa", typeof(string));
    
            var conyugueParameter = conyugue != null ?
                new ObjectParameter("conyugue", conyugue) :
                new ObjectParameter("conyugue", typeof(string));
    
            var empresaConyugueParameter = empresaConyugue != null ?
                new ObjectParameter("empresaConyugue", empresaConyugue) :
                new ObjectParameter("empresaConyugue", typeof(string));
    
            var tipoViviendaParameter = tipoVivienda != null ?
                new ObjectParameter("tipoVivienda", tipoVivienda) :
                new ObjectParameter("tipoVivienda", typeof(string));
    
            var direccionCobrosParameter = direccionCobros != null ?
                new ObjectParameter("direccionCobros", direccionCobros) :
                new ObjectParameter("direccionCobros", typeof(string));
    
            var idInstitucionEducativaParameter = idInstitucionEducativa.HasValue ?
                new ObjectParameter("idInstitucionEducativa", idInstitucionEducativa) :
                new ObjectParameter("idInstitucionEducativa", typeof(short));
    
            var nombreEstudianteParameter = nombreEstudiante != null ?
                new ObjectParameter("nombreEstudiante", nombreEstudiante) :
                new ObjectParameter("nombreEstudiante", typeof(string));
    
            var apellidoEstudianteParameter = apellidoEstudiante != null ?
                new ObjectParameter("apellidoEstudiante", apellidoEstudiante) :
                new ObjectParameter("apellidoEstudiante", typeof(string));
    
            var cursoEstudianteParameter = cursoEstudiante != null ?
                new ObjectParameter("cursoEstudiante", cursoEstudiante) :
                new ObjectParameter("cursoEstudiante", typeof(string));
    
            var parentescoEstudianteParameter = parentescoEstudiante != null ?
                new ObjectParameter("parentescoEstudiante", parentescoEstudiante) :
                new ObjectParameter("parentescoEstudiante", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertarClienteYEstudiante", nombresParameter, apellidosParameter, cedulaParameter, telefonoParameter, celularParameter, ciudadParameter, direccionParameter, nombreEmpresaParameter, telefonoEmpresaParameter, direccionEmpresaParameter, conyugueParameter, empresaConyugueParameter, tipoViviendaParameter, direccionCobrosParameter, idInstitucionEducativaParameter, nombreEstudianteParameter, apellidoEstudianteParameter, cursoEstudianteParameter, parentescoEstudianteParameter);
        }
    
        public virtual int sp_InsertarCobrador(string nombres, string apellidos, string cedula, Nullable<System.DateTime> fechaNacimiento, string direccion, string telefono, string sectorCobranza, string correoElectronico, string vehiculo, string estado, Nullable<System.DateTime> fechaInicioLaburo)
        {
            var nombresParameter = nombres != null ?
                new ObjectParameter("nombres", nombres) :
                new ObjectParameter("nombres", typeof(string));
    
            var apellidosParameter = apellidos != null ?
                new ObjectParameter("apellidos", apellidos) :
                new ObjectParameter("apellidos", typeof(string));
    
            var cedulaParameter = cedula != null ?
                new ObjectParameter("cedula", cedula) :
                new ObjectParameter("cedula", typeof(string));
    
            var fechaNacimientoParameter = fechaNacimiento.HasValue ?
                new ObjectParameter("fechaNacimiento", fechaNacimiento) :
                new ObjectParameter("fechaNacimiento", typeof(System.DateTime));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("direccion", direccion) :
                new ObjectParameter("direccion", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("telefono", telefono) :
                new ObjectParameter("telefono", typeof(string));
    
            var sectorCobranzaParameter = sectorCobranza != null ?
                new ObjectParameter("sectorCobranza", sectorCobranza) :
                new ObjectParameter("sectorCobranza", typeof(string));
    
            var correoElectronicoParameter = correoElectronico != null ?
                new ObjectParameter("correoElectronico", correoElectronico) :
                new ObjectParameter("correoElectronico", typeof(string));
    
            var vehiculoParameter = vehiculo != null ?
                new ObjectParameter("vehiculo", vehiculo) :
                new ObjectParameter("vehiculo", typeof(string));
    
            var estadoParameter = estado != null ?
                new ObjectParameter("estado", estado) :
                new ObjectParameter("estado", typeof(string));
    
            var fechaInicioLaburoParameter = fechaInicioLaburo.HasValue ?
                new ObjectParameter("fechaInicioLaburo", fechaInicioLaburo) :
                new ObjectParameter("fechaInicioLaburo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertarCobrador", nombresParameter, apellidosParameter, cedulaParameter, fechaNacimientoParameter, direccionParameter, telefonoParameter, sectorCobranzaParameter, correoElectronicoParameter, vehiculoParameter, estadoParameter, fechaInicioLaburoParameter);
        }
    
        public virtual int sp_InsertarComprobantePago(Nullable<int> nCuenta, Nullable<byte> idCobrador, Nullable<decimal> valor, Nullable<System.DateTime> fechaPago, Nullable<System.DateTime> fechaSiguientePago, Nullable<decimal> deuda, string metodoPago)
        {
            var nCuentaParameter = nCuenta.HasValue ?
                new ObjectParameter("nCuenta", nCuenta) :
                new ObjectParameter("nCuenta", typeof(int));
    
            var idCobradorParameter = idCobrador.HasValue ?
                new ObjectParameter("idCobrador", idCobrador) :
                new ObjectParameter("idCobrador", typeof(byte));
    
            var valorParameter = valor.HasValue ?
                new ObjectParameter("valor", valor) :
                new ObjectParameter("valor", typeof(decimal));
    
            var fechaPagoParameter = fechaPago.HasValue ?
                new ObjectParameter("fechaPago", fechaPago) :
                new ObjectParameter("fechaPago", typeof(System.DateTime));
    
            var fechaSiguientePagoParameter = fechaSiguientePago.HasValue ?
                new ObjectParameter("fechaSiguientePago", fechaSiguientePago) :
                new ObjectParameter("fechaSiguientePago", typeof(System.DateTime));
    
            var deudaParameter = deuda.HasValue ?
                new ObjectParameter("deuda", deuda) :
                new ObjectParameter("deuda", typeof(decimal));
    
            var metodoPagoParameter = metodoPago != null ?
                new ObjectParameter("metodoPago", metodoPago) :
                new ObjectParameter("metodoPago", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertarComprobantePago", nCuentaParameter, idCobradorParameter, valorParameter, fechaPagoParameter, fechaSiguientePagoParameter, deudaParameter, metodoPagoParameter);
        }
    
        public virtual int sp_InsertarContrato(Nullable<byte> idTrabajador, Nullable<int> idCliente, Nullable<int> nCuenta, Nullable<System.DateTime> fecha, Nullable<decimal> descuento, Nullable<decimal> valorFinal, Nullable<decimal> entrada, Nullable<decimal> bonoInicial, Nullable<System.DateTime> fechaPrimerCobro, string informacionExtra, string estado)
        {
            var idTrabajadorParameter = idTrabajador.HasValue ?
                new ObjectParameter("idTrabajador", idTrabajador) :
                new ObjectParameter("idTrabajador", typeof(byte));
    
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("idCliente", idCliente) :
                new ObjectParameter("idCliente", typeof(int));
    
            var nCuentaParameter = nCuenta.HasValue ?
                new ObjectParameter("nCuenta", nCuenta) :
                new ObjectParameter("nCuenta", typeof(int));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("fecha", fecha) :
                new ObjectParameter("fecha", typeof(System.DateTime));
    
            var descuentoParameter = descuento.HasValue ?
                new ObjectParameter("descuento", descuento) :
                new ObjectParameter("descuento", typeof(decimal));
    
            var valorFinalParameter = valorFinal.HasValue ?
                new ObjectParameter("valorFinal", valorFinal) :
                new ObjectParameter("valorFinal", typeof(decimal));
    
            var entradaParameter = entrada.HasValue ?
                new ObjectParameter("entrada", entrada) :
                new ObjectParameter("entrada", typeof(decimal));
    
            var bonoInicialParameter = bonoInicial.HasValue ?
                new ObjectParameter("bonoInicial", bonoInicial) :
                new ObjectParameter("bonoInicial", typeof(decimal));
    
            var fechaPrimerCobroParameter = fechaPrimerCobro.HasValue ?
                new ObjectParameter("fechaPrimerCobro", fechaPrimerCobro) :
                new ObjectParameter("fechaPrimerCobro", typeof(System.DateTime));
    
            var informacionExtraParameter = informacionExtra != null ?
                new ObjectParameter("informacionExtra", informacionExtra) :
                new ObjectParameter("informacionExtra", typeof(string));
    
            var estadoParameter = estado != null ?
                new ObjectParameter("estado", estado) :
                new ObjectParameter("estado", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertarContrato", idTrabajadorParameter, idClienteParameter, nCuentaParameter, fechaParameter, descuentoParameter, valorFinalParameter, entradaParameter, bonoInicialParameter, fechaPrimerCobroParameter, informacionExtraParameter, estadoParameter);
        }
    
        public virtual int sp_InsertarContratoCompletoDosReferencias(string nombres, string apellidos, string cedula, string telefono, string celular, string ciudad, string direccion, string nombreEmpresa, string telefonoEmpresa, string direccionEmpresa, string conyugue, string empresaConyugue, string tipoVivienda, string direccionCobros, Nullable<byte> idTrabajador, Nullable<int> nCuenta, Nullable<System.DateTime> fecha, Nullable<decimal> descuento, Nullable<decimal> valorFinal, Nullable<decimal> entrada, Nullable<decimal> bonoInicial, Nullable<System.DateTime> fechaPrimerCobro, string informacionExtra, string estado, string nombreReferencia, string apellidosReferencia, string telefonoReferencia, string parentescoReferencia, string nombreReferencia2, string apellidosReferencia2, string telefonoReferencia2, string parentescoReferencia2)
        {
            var nombresParameter = nombres != null ?
                new ObjectParameter("nombres", nombres) :
                new ObjectParameter("nombres", typeof(string));
    
            var apellidosParameter = apellidos != null ?
                new ObjectParameter("apellidos", apellidos) :
                new ObjectParameter("apellidos", typeof(string));
    
            var cedulaParameter = cedula != null ?
                new ObjectParameter("cedula", cedula) :
                new ObjectParameter("cedula", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("telefono", telefono) :
                new ObjectParameter("telefono", typeof(string));
    
            var celularParameter = celular != null ?
                new ObjectParameter("celular", celular) :
                new ObjectParameter("celular", typeof(string));
    
            var ciudadParameter = ciudad != null ?
                new ObjectParameter("ciudad", ciudad) :
                new ObjectParameter("ciudad", typeof(string));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("direccion", direccion) :
                new ObjectParameter("direccion", typeof(string));
    
            var nombreEmpresaParameter = nombreEmpresa != null ?
                new ObjectParameter("nombreEmpresa", nombreEmpresa) :
                new ObjectParameter("nombreEmpresa", typeof(string));
    
            var telefonoEmpresaParameter = telefonoEmpresa != null ?
                new ObjectParameter("telefonoEmpresa", telefonoEmpresa) :
                new ObjectParameter("telefonoEmpresa", typeof(string));
    
            var direccionEmpresaParameter = direccionEmpresa != null ?
                new ObjectParameter("direccionEmpresa", direccionEmpresa) :
                new ObjectParameter("direccionEmpresa", typeof(string));
    
            var conyugueParameter = conyugue != null ?
                new ObjectParameter("conyugue", conyugue) :
                new ObjectParameter("conyugue", typeof(string));
    
            var empresaConyugueParameter = empresaConyugue != null ?
                new ObjectParameter("empresaConyugue", empresaConyugue) :
                new ObjectParameter("empresaConyugue", typeof(string));
    
            var tipoViviendaParameter = tipoVivienda != null ?
                new ObjectParameter("tipoVivienda", tipoVivienda) :
                new ObjectParameter("tipoVivienda", typeof(string));
    
            var direccionCobrosParameter = direccionCobros != null ?
                new ObjectParameter("direccionCobros", direccionCobros) :
                new ObjectParameter("direccionCobros", typeof(string));
    
            var idTrabajadorParameter = idTrabajador.HasValue ?
                new ObjectParameter("idTrabajador", idTrabajador) :
                new ObjectParameter("idTrabajador", typeof(byte));
    
            var nCuentaParameter = nCuenta.HasValue ?
                new ObjectParameter("nCuenta", nCuenta) :
                new ObjectParameter("nCuenta", typeof(int));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("fecha", fecha) :
                new ObjectParameter("fecha", typeof(System.DateTime));
    
            var descuentoParameter = descuento.HasValue ?
                new ObjectParameter("descuento", descuento) :
                new ObjectParameter("descuento", typeof(decimal));
    
            var valorFinalParameter = valorFinal.HasValue ?
                new ObjectParameter("valorFinal", valorFinal) :
                new ObjectParameter("valorFinal", typeof(decimal));
    
            var entradaParameter = entrada.HasValue ?
                new ObjectParameter("entrada", entrada) :
                new ObjectParameter("entrada", typeof(decimal));
    
            var bonoInicialParameter = bonoInicial.HasValue ?
                new ObjectParameter("bonoInicial", bonoInicial) :
                new ObjectParameter("bonoInicial", typeof(decimal));
    
            var fechaPrimerCobroParameter = fechaPrimerCobro.HasValue ?
                new ObjectParameter("fechaPrimerCobro", fechaPrimerCobro) :
                new ObjectParameter("fechaPrimerCobro", typeof(System.DateTime));
    
            var informacionExtraParameter = informacionExtra != null ?
                new ObjectParameter("informacionExtra", informacionExtra) :
                new ObjectParameter("informacionExtra", typeof(string));
    
            var estadoParameter = estado != null ?
                new ObjectParameter("estado", estado) :
                new ObjectParameter("estado", typeof(string));
    
            var nombreReferenciaParameter = nombreReferencia != null ?
                new ObjectParameter("nombreReferencia", nombreReferencia) :
                new ObjectParameter("nombreReferencia", typeof(string));
    
            var apellidosReferenciaParameter = apellidosReferencia != null ?
                new ObjectParameter("apellidosReferencia", apellidosReferencia) :
                new ObjectParameter("apellidosReferencia", typeof(string));
    
            var telefonoReferenciaParameter = telefonoReferencia != null ?
                new ObjectParameter("telefonoReferencia", telefonoReferencia) :
                new ObjectParameter("telefonoReferencia", typeof(string));
    
            var parentescoReferenciaParameter = parentescoReferencia != null ?
                new ObjectParameter("parentescoReferencia", parentescoReferencia) :
                new ObjectParameter("parentescoReferencia", typeof(string));
    
            var nombreReferencia2Parameter = nombreReferencia2 != null ?
                new ObjectParameter("nombreReferencia2", nombreReferencia2) :
                new ObjectParameter("nombreReferencia2", typeof(string));
    
            var apellidosReferencia2Parameter = apellidosReferencia2 != null ?
                new ObjectParameter("apellidosReferencia2", apellidosReferencia2) :
                new ObjectParameter("apellidosReferencia2", typeof(string));
    
            var telefonoReferencia2Parameter = telefonoReferencia2 != null ?
                new ObjectParameter("telefonoReferencia2", telefonoReferencia2) :
                new ObjectParameter("telefonoReferencia2", typeof(string));
    
            var parentescoReferencia2Parameter = parentescoReferencia2 != null ?
                new ObjectParameter("parentescoReferencia2", parentescoReferencia2) :
                new ObjectParameter("parentescoReferencia2", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertarContratoCompletoDosReferencias", nombresParameter, apellidosParameter, cedulaParameter, telefonoParameter, celularParameter, ciudadParameter, direccionParameter, nombreEmpresaParameter, telefonoEmpresaParameter, direccionEmpresaParameter, conyugueParameter, empresaConyugueParameter, tipoViviendaParameter, direccionCobrosParameter, idTrabajadorParameter, nCuentaParameter, fechaParameter, descuentoParameter, valorFinalParameter, entradaParameter, bonoInicialParameter, fechaPrimerCobroParameter, informacionExtraParameter, estadoParameter, nombreReferenciaParameter, apellidosReferenciaParameter, telefonoReferenciaParameter, parentescoReferenciaParameter, nombreReferencia2Parameter, apellidosReferencia2Parameter, telefonoReferencia2Parameter, parentescoReferencia2Parameter);
        }
    
        public virtual int sp_InsertarContratoCompletoUnaReferencia(string nombres, string apellidos, string cedula, string telefono, string celular, string ciudad, string direccion, string nombreEmpresa, string telefonoEmpresa, string direccionEmpresa, string conyugue, string empresaConyugue, string tipoVivienda, string direccionCobros, Nullable<byte> idTrabajador, Nullable<int> nCuenta, Nullable<System.DateTime> fecha, Nullable<decimal> descuento, Nullable<decimal> valorFinal, Nullable<decimal> entrada, Nullable<decimal> bonoInicial, Nullable<System.DateTime> fechaPrimerCobro, string informacionExtra, string estado, string nombreReferencia, string apellidosReferencia, string telefonoReferencia, string parentescoReferencia)
        {
            var nombresParameter = nombres != null ?
                new ObjectParameter("nombres", nombres) :
                new ObjectParameter("nombres", typeof(string));
    
            var apellidosParameter = apellidos != null ?
                new ObjectParameter("apellidos", apellidos) :
                new ObjectParameter("apellidos", typeof(string));
    
            var cedulaParameter = cedula != null ?
                new ObjectParameter("cedula", cedula) :
                new ObjectParameter("cedula", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("telefono", telefono) :
                new ObjectParameter("telefono", typeof(string));
    
            var celularParameter = celular != null ?
                new ObjectParameter("celular", celular) :
                new ObjectParameter("celular", typeof(string));
    
            var ciudadParameter = ciudad != null ?
                new ObjectParameter("ciudad", ciudad) :
                new ObjectParameter("ciudad", typeof(string));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("direccion", direccion) :
                new ObjectParameter("direccion", typeof(string));
    
            var nombreEmpresaParameter = nombreEmpresa != null ?
                new ObjectParameter("nombreEmpresa", nombreEmpresa) :
                new ObjectParameter("nombreEmpresa", typeof(string));
    
            var telefonoEmpresaParameter = telefonoEmpresa != null ?
                new ObjectParameter("telefonoEmpresa", telefonoEmpresa) :
                new ObjectParameter("telefonoEmpresa", typeof(string));
    
            var direccionEmpresaParameter = direccionEmpresa != null ?
                new ObjectParameter("direccionEmpresa", direccionEmpresa) :
                new ObjectParameter("direccionEmpresa", typeof(string));
    
            var conyugueParameter = conyugue != null ?
                new ObjectParameter("conyugue", conyugue) :
                new ObjectParameter("conyugue", typeof(string));
    
            var empresaConyugueParameter = empresaConyugue != null ?
                new ObjectParameter("empresaConyugue", empresaConyugue) :
                new ObjectParameter("empresaConyugue", typeof(string));
    
            var tipoViviendaParameter = tipoVivienda != null ?
                new ObjectParameter("tipoVivienda", tipoVivienda) :
                new ObjectParameter("tipoVivienda", typeof(string));
    
            var direccionCobrosParameter = direccionCobros != null ?
                new ObjectParameter("direccionCobros", direccionCobros) :
                new ObjectParameter("direccionCobros", typeof(string));
    
            var idTrabajadorParameter = idTrabajador.HasValue ?
                new ObjectParameter("idTrabajador", idTrabajador) :
                new ObjectParameter("idTrabajador", typeof(byte));
    
            var nCuentaParameter = nCuenta.HasValue ?
                new ObjectParameter("nCuenta", nCuenta) :
                new ObjectParameter("nCuenta", typeof(int));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("fecha", fecha) :
                new ObjectParameter("fecha", typeof(System.DateTime));
    
            var descuentoParameter = descuento.HasValue ?
                new ObjectParameter("descuento", descuento) :
                new ObjectParameter("descuento", typeof(decimal));
    
            var valorFinalParameter = valorFinal.HasValue ?
                new ObjectParameter("valorFinal", valorFinal) :
                new ObjectParameter("valorFinal", typeof(decimal));
    
            var entradaParameter = entrada.HasValue ?
                new ObjectParameter("entrada", entrada) :
                new ObjectParameter("entrada", typeof(decimal));
    
            var bonoInicialParameter = bonoInicial.HasValue ?
                new ObjectParameter("bonoInicial", bonoInicial) :
                new ObjectParameter("bonoInicial", typeof(decimal));
    
            var fechaPrimerCobroParameter = fechaPrimerCobro.HasValue ?
                new ObjectParameter("fechaPrimerCobro", fechaPrimerCobro) :
                new ObjectParameter("fechaPrimerCobro", typeof(System.DateTime));
    
            var informacionExtraParameter = informacionExtra != null ?
                new ObjectParameter("informacionExtra", informacionExtra) :
                new ObjectParameter("informacionExtra", typeof(string));
    
            var estadoParameter = estado != null ?
                new ObjectParameter("estado", estado) :
                new ObjectParameter("estado", typeof(string));
    
            var nombreReferenciaParameter = nombreReferencia != null ?
                new ObjectParameter("nombreReferencia", nombreReferencia) :
                new ObjectParameter("nombreReferencia", typeof(string));
    
            var apellidosReferenciaParameter = apellidosReferencia != null ?
                new ObjectParameter("apellidosReferencia", apellidosReferencia) :
                new ObjectParameter("apellidosReferencia", typeof(string));
    
            var telefonoReferenciaParameter = telefonoReferencia != null ?
                new ObjectParameter("telefonoReferencia", telefonoReferencia) :
                new ObjectParameter("telefonoReferencia", typeof(string));
    
            var parentescoReferenciaParameter = parentescoReferencia != null ?
                new ObjectParameter("parentescoReferencia", parentescoReferencia) :
                new ObjectParameter("parentescoReferencia", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertarContratoCompletoUnaReferencia", nombresParameter, apellidosParameter, cedulaParameter, telefonoParameter, celularParameter, ciudadParameter, direccionParameter, nombreEmpresaParameter, telefonoEmpresaParameter, direccionEmpresaParameter, conyugueParameter, empresaConyugueParameter, tipoViviendaParameter, direccionCobrosParameter, idTrabajadorParameter, nCuentaParameter, fechaParameter, descuentoParameter, valorFinalParameter, entradaParameter, bonoInicialParameter, fechaPrimerCobroParameter, informacionExtraParameter, estadoParameter, nombreReferenciaParameter, apellidosReferenciaParameter, telefonoReferenciaParameter, parentescoReferenciaParameter);
        }
    
        public virtual int sp_InsertarDetalleContrato(Nullable<int> nContrato, Nullable<byte> idLibro, Nullable<byte> cantidad)
        {
            var nContratoParameter = nContrato.HasValue ?
                new ObjectParameter("nContrato", nContrato) :
                new ObjectParameter("nContrato", typeof(int));
    
            var idLibroParameter = idLibro.HasValue ?
                new ObjectParameter("idLibro", idLibro) :
                new ObjectParameter("idLibro", typeof(byte));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("cantidad", cantidad) :
                new ObjectParameter("cantidad", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertarDetalleContrato", nContratoParameter, idLibroParameter, cantidadParameter);
        }
    
        public virtual int sp_InsertarEstudiante(Nullable<short> idInstitucionEducativa, string nombre, string apellido, string curso)
        {
            var idInstitucionEducativaParameter = idInstitucionEducativa.HasValue ?
                new ObjectParameter("idInstitucionEducativa", idInstitucionEducativa) :
                new ObjectParameter("idInstitucionEducativa", typeof(short));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var apellidoParameter = apellido != null ?
                new ObjectParameter("apellido", apellido) :
                new ObjectParameter("apellido", typeof(string));
    
            var cursoParameter = curso != null ?
                new ObjectParameter("curso", curso) :
                new ObjectParameter("curso", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertarEstudiante", idInstitucionEducativaParameter, nombreParameter, apellidoParameter, cursoParameter);
        }
    
        public virtual int sp_InsertarInstitucionEducativa(string nombre, string nombreContacto, string telefonoContacto, Nullable<System.DateTime> ultimaVisita)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var nombreContactoParameter = nombreContacto != null ?
                new ObjectParameter("nombreContacto", nombreContacto) :
                new ObjectParameter("nombreContacto", typeof(string));
    
            var telefonoContactoParameter = telefonoContacto != null ?
                new ObjectParameter("telefonoContacto", telefonoContacto) :
                new ObjectParameter("telefonoContacto", typeof(string));
    
            var ultimaVisitaParameter = ultimaVisita.HasValue ?
                new ObjectParameter("ultimaVisita", ultimaVisita) :
                new ObjectParameter("ultimaVisita", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertarInstitucionEducativa", nombreParameter, nombreContactoParameter, telefonoContactoParameter, ultimaVisitaParameter);
        }
    
        public virtual int sp_InsertarLibro(string codigo, string titulo, string autor, Nullable<decimal> pvp, Nullable<short> stock, string categoria, string publico)
        {
            var codigoParameter = codigo != null ?
                new ObjectParameter("codigo", codigo) :
                new ObjectParameter("codigo", typeof(string));
    
            var tituloParameter = titulo != null ?
                new ObjectParameter("titulo", titulo) :
                new ObjectParameter("titulo", typeof(string));
    
            var autorParameter = autor != null ?
                new ObjectParameter("autor", autor) :
                new ObjectParameter("autor", typeof(string));
    
            var pvpParameter = pvp.HasValue ?
                new ObjectParameter("pvp", pvp) :
                new ObjectParameter("pvp", typeof(decimal));
    
            var stockParameter = stock.HasValue ?
                new ObjectParameter("stock", stock) :
                new ObjectParameter("stock", typeof(short));
    
            var categoriaParameter = categoria != null ?
                new ObjectParameter("categoria", categoria) :
                new ObjectParameter("categoria", typeof(string));
    
            var publicoParameter = publico != null ?
                new ObjectParameter("publico", publico) :
                new ObjectParameter("publico", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertarLibro", codigoParameter, tituloParameter, autorParameter, pvpParameter, stockParameter, categoriaParameter, publicoParameter);
        }
    
        public virtual int sp_InsertarProveedor(string nombreEmpresa, string telefonoEmpresa, string nombreContacto, string telefonoContacto, string pais, string ciudad, string email, string plataformaCompra)
        {
            var nombreEmpresaParameter = nombreEmpresa != null ?
                new ObjectParameter("nombreEmpresa", nombreEmpresa) :
                new ObjectParameter("nombreEmpresa", typeof(string));
    
            var telefonoEmpresaParameter = telefonoEmpresa != null ?
                new ObjectParameter("telefonoEmpresa", telefonoEmpresa) :
                new ObjectParameter("telefonoEmpresa", typeof(string));
    
            var nombreContactoParameter = nombreContacto != null ?
                new ObjectParameter("nombreContacto", nombreContacto) :
                new ObjectParameter("nombreContacto", typeof(string));
    
            var telefonoContactoParameter = telefonoContacto != null ?
                new ObjectParameter("telefonoContacto", telefonoContacto) :
                new ObjectParameter("telefonoContacto", typeof(string));
    
            var paisParameter = pais != null ?
                new ObjectParameter("pais", pais) :
                new ObjectParameter("pais", typeof(string));
    
            var ciudadParameter = ciudad != null ?
                new ObjectParameter("ciudad", ciudad) :
                new ObjectParameter("ciudad", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var plataformaCompraParameter = plataformaCompra != null ?
                new ObjectParameter("plataformaCompra", plataformaCompra) :
                new ObjectParameter("plataformaCompra", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertarProveedor", nombreEmpresaParameter, telefonoEmpresaParameter, nombreContactoParameter, telefonoContactoParameter, paisParameter, ciudadParameter, emailParameter, plataformaCompraParameter);
        }
    
        public virtual int sp_InsertarProveedorLibro(Nullable<byte> idProveedor, Nullable<byte> idLibro, Nullable<decimal> precioCompra)
        {
            var idProveedorParameter = idProveedor.HasValue ?
                new ObjectParameter("idProveedor", idProveedor) :
                new ObjectParameter("idProveedor", typeof(byte));
    
            var idLibroParameter = idLibro.HasValue ?
                new ObjectParameter("idLibro", idLibro) :
                new ObjectParameter("idLibro", typeof(byte));
    
            var precioCompraParameter = precioCompra.HasValue ?
                new ObjectParameter("precioCompra", precioCompra) :
                new ObjectParameter("precioCompra", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertarProveedorLibro", idProveedorParameter, idLibroParameter, precioCompraParameter);
        }
    
        public virtual int sp_InsertarProveedorYLibro(string nombreEmpresa, string telefonoEmpresa, string nombreContacto, string telefonoContacto, string pais, string ciudad, string email, string plataformaCompra, string codigo, string titulo, string autor, Nullable<decimal> pvp, Nullable<short> stock, string categoria, string publico)
        {
            var nombreEmpresaParameter = nombreEmpresa != null ?
                new ObjectParameter("nombreEmpresa", nombreEmpresa) :
                new ObjectParameter("nombreEmpresa", typeof(string));
    
            var telefonoEmpresaParameter = telefonoEmpresa != null ?
                new ObjectParameter("telefonoEmpresa", telefonoEmpresa) :
                new ObjectParameter("telefonoEmpresa", typeof(string));
    
            var nombreContactoParameter = nombreContacto != null ?
                new ObjectParameter("nombreContacto", nombreContacto) :
                new ObjectParameter("nombreContacto", typeof(string));
    
            var telefonoContactoParameter = telefonoContacto != null ?
                new ObjectParameter("telefonoContacto", telefonoContacto) :
                new ObjectParameter("telefonoContacto", typeof(string));
    
            var paisParameter = pais != null ?
                new ObjectParameter("pais", pais) :
                new ObjectParameter("pais", typeof(string));
    
            var ciudadParameter = ciudad != null ?
                new ObjectParameter("ciudad", ciudad) :
                new ObjectParameter("ciudad", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var plataformaCompraParameter = plataformaCompra != null ?
                new ObjectParameter("plataformaCompra", plataformaCompra) :
                new ObjectParameter("plataformaCompra", typeof(string));
    
            var codigoParameter = codigo != null ?
                new ObjectParameter("codigo", codigo) :
                new ObjectParameter("codigo", typeof(string));
    
            var tituloParameter = titulo != null ?
                new ObjectParameter("titulo", titulo) :
                new ObjectParameter("titulo", typeof(string));
    
            var autorParameter = autor != null ?
                new ObjectParameter("autor", autor) :
                new ObjectParameter("autor", typeof(string));
    
            var pvpParameter = pvp.HasValue ?
                new ObjectParameter("pvp", pvp) :
                new ObjectParameter("pvp", typeof(decimal));
    
            var stockParameter = stock.HasValue ?
                new ObjectParameter("stock", stock) :
                new ObjectParameter("stock", typeof(short));
    
            var categoriaParameter = categoria != null ?
                new ObjectParameter("categoria", categoria) :
                new ObjectParameter("categoria", typeof(string));
    
            var publicoParameter = publico != null ?
                new ObjectParameter("publico", publico) :
                new ObjectParameter("publico", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertarProveedorYLibro", nombreEmpresaParameter, telefonoEmpresaParameter, nombreContactoParameter, telefonoContactoParameter, paisParameter, ciudadParameter, emailParameter, plataformaCompraParameter, codigoParameter, tituloParameter, autorParameter, pvpParameter, stockParameter, categoriaParameter, publicoParameter);
        }
    
        public virtual int sp_InsertarReferenciaPago(string nombre, string apellidos, string telefono, string parentesco)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var apellidosParameter = apellidos != null ?
                new ObjectParameter("apellidos", apellidos) :
                new ObjectParameter("apellidos", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("telefono", telefono) :
                new ObjectParameter("telefono", typeof(string));
    
            var parentescoParameter = parentesco != null ?
                new ObjectParameter("parentesco", parentesco) :
                new ObjectParameter("parentesco", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertarReferenciaPago", nombreParameter, apellidosParameter, telefonoParameter, parentescoParameter);
        }
    
        public virtual int sp_InsertarSecretario(Nullable<byte> idTrabajador, string email)
        {
            var idTrabajadorParameter = idTrabajador.HasValue ?
                new ObjectParameter("idTrabajador", idTrabajador) :
                new ObjectParameter("idTrabajador", typeof(byte));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertarSecretario", idTrabajadorParameter, emailParameter);
        }
    
        public virtual int sp_InsertarTrabajador(string nombres, string apellidos, string cedula, Nullable<System.DateTime> fechaNacimiento, string direccion, string telefono, Nullable<System.DateTime> fechaInicioLaburo, string estado)
        {
            var nombresParameter = nombres != null ?
                new ObjectParameter("nombres", nombres) :
                new ObjectParameter("nombres", typeof(string));
    
            var apellidosParameter = apellidos != null ?
                new ObjectParameter("apellidos", apellidos) :
                new ObjectParameter("apellidos", typeof(string));
    
            var cedulaParameter = cedula != null ?
                new ObjectParameter("cedula", cedula) :
                new ObjectParameter("cedula", typeof(string));
    
            var fechaNacimientoParameter = fechaNacimiento.HasValue ?
                new ObjectParameter("fechaNacimiento", fechaNacimiento) :
                new ObjectParameter("fechaNacimiento", typeof(System.DateTime));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("direccion", direccion) :
                new ObjectParameter("direccion", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("telefono", telefono) :
                new ObjectParameter("telefono", typeof(string));
    
            var fechaInicioLaburoParameter = fechaInicioLaburo.HasValue ?
                new ObjectParameter("fechaInicioLaburo", fechaInicioLaburo) :
                new ObjectParameter("fechaInicioLaburo", typeof(System.DateTime));
    
            var estadoParameter = estado != null ?
                new ObjectParameter("estado", estado) :
                new ObjectParameter("estado", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertarTrabajador", nombresParameter, apellidosParameter, cedulaParameter, fechaNacimientoParameter, direccionParameter, telefonoParameter, fechaInicioLaburoParameter, estadoParameter);
        }
    }
}
